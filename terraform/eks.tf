# Configure the Kubernetes Provider to interact with the EKS cluster
# This provider needs to be configured with the EKS cluster's endpoint and a token.
# The token is generated by aws-cli using the cluster's context.
provider "kubernetes" {
  host                   = aws_eks_cluster.eks.endpoint
  cluster_ca_certificate = base64decode(aws_eks_cluster.eks.certificate_authority[0].data)
  token                  = data.aws_eks_cluster_auth.main.token
}

# Data source to get the authentication token for the EKS cluster
data "aws_eks_cluster_auth" "main" {
  name = aws_eks_cluster.eks.name
}

resource "aws_eks_cluster" "eks" {
  name     = "${var.project_name}-${var.environment}-eks"
  role_arn = aws_iam_role.eks_cluster_role.arn

  vpc_config {
    subnet_ids         = [aws_subnet.subnet_1.id, aws_subnet.subnet_2.id]
    security_group_ids = [aws_security_group.eks_sg.id]
    endpoint_private_access = false
    endpoint_public_access  = true
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_cluster_policy
  ]
}

resource "aws_eks_node_group" "node_group" {
  cluster_name    = aws_eks_cluster.eks.name
  node_group_name = "${var.project_name}-${var.environment}-eks-nodes"
  node_role_arn   = aws_iam_role.eks_node_role.arn
  subnet_ids      = [aws_subnet.subnet_1.id, aws_subnet.subnet_2.id]
  instance_types  = ["t3.medium"] # t3.medium is a reasonable choice for EKS nodes
  scaling_config {
    desired_size = 2
    max_size     = 3
    min_size     = 1
  }
  depends_on = [
    aws_iam_role_policy_attachment.eks_worker_node_policy,
    aws_iam_role_policy_attachment.eks_cni_policy,
    aws_iam_role_policy_attachment.eks_node_ecr_read_only,
    aws_security_group.eks_sg
  ]
}

# IMPORTANT: Configure the aws-auth ConfigMap in Kubernetes via Terraform
# This grants the EC2 build server's IAM role and the EKS node role permissions.
# TEMPORARILY REMOVE OR COMMENT OUT THIS BLOCK FOR IMPORT

resource "kubernetes_config_map_v1" "aws_auth" {
  metadata {
    name      = "aws-auth"
    namespace = "kube-system"
  }
  data = {
    mapRoles = yamlencode([
      {
        rolearn  = aws_iam_role.eks_node_role.arn
        username = "system:node:{{EC2PrivateDNSName}}"
        groups   = ["system:bootstrappers", "system:nodes"]
      },
      {
        rolearn  = aws_iam_role.ec2_role.arn
        username = "build-server"
        groups   = ["system:masters"]
      }
    ])
  }
  depends_on = [aws_eks_cluster.eks]
}
